{"changed":true,"filter":false,"title":"app.js","tooltip":"/node/app.js","value":"'use strict';\n\n\nconst\n    bodyParser = require('body-parser'),\n    config = require('config'),\n    crypto = require('crypto'),\n    express = require('express'),\n    https = require('https'),\n    mysql = require('mysql'),\n    api = require('./include/api'),\n    global = require('./include/global'),\n    request = require('request');\n\nvar app = express();\napp.set('port', process.env.PORT || 5000);\napp.set('view engine', 'ejs');\napp.use(bodyParser.json({\n    verify: verifyRequestSignature\n}));\napp.use(express.static('public'));\n\n\n// Credentials\nconst\n    APP_SECRET = config.get('appSecret'),\n    VALIDATION_TOKEN = config.get('validationToken'),\n    PAGE_ACCESS_TOKEN = config.get('pageAccessToken'),\n    SERVER_URL = config.get('serverURL'),\n    API_URL = config.get('apiURL'),\n    DB_HOST = config.get('dbHost'),\n    DB_USER = config.get('dbUser'),\n    DB_PW = config.get('dbPassword'),\n    DB_NAME = config.get('dbName');\n\nvar connection = mysql.createConnection({\n    host: DB_HOST,\n    user: DB_USER,\n    password: DB_PW,\n    database: DB_NAME\n});\n\n\nconst ContextEnum = {\n    DEFAULT: 0,\n    ADD_CLASS: 1,\n    ADD_DUE: 2\n}\n\nvar context = ContextEnum.DEFAULT;\n\napp.get('/webhook', function(req, res) {\n    if (req.query['hub.mode'] === 'subscribe' &&\n        req.query['hub.verify_token'] === VALIDATION_TOKEN) {\n        console.log(\"Validating webhook\");\n        res.status(200).send(req.query['hub.challenge']);\n    }\n    else {\n        console.error(\"Failed validation. Make sure the validation tokens match.\");\n        res.sendStatus(403);\n    }\n});\n\n\n\napp.post('/webhook', function(req, res) {\n    var data = req.body;\n\n    // Make sure this is a page subscription\n    if (data.object == 'page') {\n        // Iterate over each entry\n        // There may be multiple if batched\n        data.entry.forEach(function(pageEntry) {\n            var pageID = pageEntry.id;\n            var timeOfEvent = pageEntry.time;\n\n            // Iterate over each messaging event\n            pageEntry.messaging.forEach(function(messagingEvent) {\n                if (messagingEvent.optin) {\n                    receivedAuthentication(messagingEvent);\n                }\n                else if (messagingEvent.message) {\n                    receivedMessage(messagingEvent);\n                }\n                else if (messagingEvent.delivery) {\n                    receivedDeliveryConfirmation(messagingEvent);\n                }\n                else if (messagingEvent.postback) {\n                    receivedPostback(messagingEvent);\n                }\n                else if (messagingEvent.read) {\n                    receivedMessageRead(messagingEvent);\n                }\n                else if (messagingEvent.account_linking) {\n                    receivedAccountLink(messagingEvent);\n                }\n                else {\n                    console.log(\"Webhook received unknown messagingEvent: \", messagingEvent);\n                }\n            });\n        });\n\n        res.sendStatus(200);\n    }\n});\n\n\napp.get('/authorize', function(req, res) {\n    var accountLinkingToken = req.query.account_linking_token;\n    var redirectURI = req.query.redirect_uri;\n\n    // Authorization Code should be generated per user by the developer. This will\n    // be passed to the Account Linking callback.\n    var authCode = \"1234567890\";\n\n    // Redirect users to this URI on successful login\n    var redirectURISuccess = redirectURI + \"&authorization_code=\" + authCode;\n\n    res.render('authorize', {\n        accountLinkingToken: accountLinkingToken,\n        redirectURI: redirectURI,\n        redirectURISuccess: redirectURISuccess\n    });\n});\n\n\nfunction verifyRequestSignature(req, res, buf) {\n    var signature = req.headers[\"x-hub-signature\"];\n\n    if (!signature) {\n        // For testing, let's log an error. In production, you should throw an\n        // error.\n        console.error(\"Couldn't validate the signature.\");\n    }\n    else {\n        var elements = signature.split('=');\n        var method = elements[0];\n        var signatureHash = elements[1];\n\n        var expectedHash = crypto.createHmac('sha1', APP_SECRET)\n            .update(buf)\n            .digest('hex');\n\n        if (signatureHash != expectedHash) {\n            throw new Error(\"Couldn't validate the request signature.\");\n        }\n    }\n}\n\n\nfunction receivedAuthentication(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n    var timeOfAuth = event.timestamp;\n    var passThroughParam = event.optin.ref;\n\n    console.log(\"Received authentication for user %d and page %d with pass \" +\n        \"through param '%s' at %d\", senderID, recipientID, passThroughParam,\n        timeOfAuth);\n\n\n    api.sendTextMessageWithMenu(senderID, \"Authentication successful\");\n}\n\n\nfunction receivedMessage(event) {\n    var senderID = event.sender.id;\n    console.log(senderID);\n    var recipientID = event.recipient.id;\n    var timeOfMessage = event.timestamp;\n    var message = event.message;\n\n\n    var isEcho = message.is_echo;\n    var messageId = message.mid;\n    var appId = message.app_id;\n    var metadata = message.metadata;\n\n    // You may get a text or attachment but not both\n    var messageText = message.text;\n    var messageAttachments = message.attachments;\n    var quickReply = message.quick_reply;\n\n    if (isEcho) {\n        console.log(messageText);\n        return;\n    }\n    else if (quickReply) {\n        var quickReplyPayload = quickReply.payload;\n        if (context == ContextEnum.ADD_CLASS) {\n            if (messageText == 'Sure') {\n                connection.query('INSERT INTO classes SET ?', {name: quickReplyPayload},\n                function(err, result) {\n                    context = ContextEnum.DEFAULT;\n                    if (err) {\n                        api.sendTextMessageWithMenu(senderID, global.ErrorEnum.DBERROR, 'MAIN');\n                    } else {\n                        api.sendTextMessageWithMenu(senderID, quickReply.payload +\n                            ' now added to database. Thanks for helping us make our service better!');\n                        connection.query('INSERT INTO user_class SET ?', {uid: senderID, cid: result.insertId},\n                        function(err, result) {\n                            if (err) {\n                                api.sendTextMessageWithMenu(senderID, global.ErrorEnum.DBERROR);\n                            } else {\n                                api.sendTextMessageWithMenu(senderID, 'Your class list now: ', 'MAIN');\n                                api.sendUserClasses(senderID);\n                            }\n                        })\n                    }\n                });\n            } else if (quickReplyPayload == 'CANCEL') {\n                context = ContextEnum.DEFAULT;\n                api.sendTextMessageWithMenu(senderID, 'What else can I help you with?', 'MAIN');\n            } else if (quickReplyPayload == 'REDO'){\n                api.sendTextMessageWithMenu(senderID, '🙂', 'CANCEL');\n            }\n\n        }\n        if (quickReplyPayload == 'FETCH_USER_CLASSES') {\n            api.sendUserClasses(senderID);\n        }\n        if (quickReplyPayload == 'FETCH_USER_DUES') {\n\n        }\n        return;\n    }\n\n    if (messageText) {\n        switch (context) {\n            case ContextEnum.DEFAULT:\n                if (messageText == 'options') {\n                    api.sendTextMessageWithMenu(senderID, 'Here is what I can do now: ', 'MAIN');\n                } else {\n                    api.sendTextMessageWithMenu(senderID, 'Send `options` to see what you can do 😊');\n                }\n                break;\n            case ContextEnum.ADD_CLASS:\n                connection.query('SELECT * FROM classes WHERE ?', {name: messageText},\n                function(err, rows, fields) {\n                    if (rows.length != 0) {\n                        if (err) error(senderID);\n                        connection.query('INSERT INTO user_class SET ?', {uid: senderID, cid: rows[0].id}, function(err, rows, fields) {\n                            context = ContextEnum.DEFAULT;\n                            if (err) error(senderID);\n                            api.sendTextMessageWithMenu(senderID, messageText + ' now added to your class list~😀 Your class list now: ', 'MAIN');\n                            api.sendUserClasses(senderID);\n                        });\n                    } else {\n                        var qst = 'Hmm. It seems this class is not in our database. Would you'\n                        + 'like it added to our database so that other users would be able to access it? '\n                        + '(We would also add it to your class list!)';\n                        var qr = [\n                            {\n                                content_type: 'text',\n                                title: 'Sure',\n                                payload: messageText\n                            },\n                            {\n                                content_type: 'text',\n                                title: \"No it's my typo :)\",\n                                payload: 'REDO'\n                            }\n                        ];\n                        api.sendQuickReply(senderID, qst, qr);\n                    }\n                })\n                break;\n            default:\n\n        }\n    }\n    else if (messageAttachments) {\n        api.sendTextMessageWithMenu(senderID, \"Message with attachment received\");\n    }\n}\n\n\nfunction receivedDeliveryConfirmation(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n    var delivery = event.delivery;\n    var messageIDs = delivery.mids;\n    var watermark = delivery.watermark;\n    var sequenceNumber = delivery.seq;\n\n    if (messageIDs) {\n        messageIDs.forEach(function(messageID) {\n            console.log(\"Received delivery confirmation for message ID: %s\",\n                messageID);\n        });\n    }\n\n    console.log(\"All message before %d were delivered.\", watermark);\n}\n\n\n\nfunction receivedPostback(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n    var timeOfPostback = event.timestamp;\n\n    // The 'payload' param is a developer-defined field which is set in a postback\n    // button for Structured Messages.\n    var payload = event.postback.payload;\n\n    // Parse payload corespondingly\n    switch (payload) {\n        case 'ADD_CLASS':\n            console.log(\"ADDCLASS\");\n            context = ContextEnum.ADD_CLASS;\n            api.sendTextMessageWithMenu(senderID, 'Enter the class code you want to add ☺️ (e.g. COMPSCI61A)', 'CANCEL');\n            break;\n        case 'GET_STARTED':\n            connection.query('INSERT INTO users SET ?', {\n                    id: senderID\n                },\n                function(err, result) {\n                    if (err) console.log(err.code);\n                });\n            request({\n                uri: API_URL + senderID,\n                method: 'GET',\n                qs: {\n                    access_token: PAGE_ACCESS_TOKEN\n                }\n            }, function(error, response, body) {\n                if (error) {\n                    console.log(error);\n                }\n                else {\n                    var firstName = JSON.parse(body).first_name;\n                    api.sendTextMessageWithMenu(senderID, 'Hi ' + firstName + ', how can I help you today?', 'MAIN');\n                }\n            });\n            break;\n        default:\n            break;\n    }\n\n}\n\n// function showMainContextualMenu(senderID) {\n//     api.sendQuickReply(senderID, \"What else can I help you with?\", 'My classes', 'FETCH_USER_CLASSES', 'My dues', 'FETCH_USER_DUES');\n// }\n\nfunction error(senderID) {\n    api.sendTextMessageWithMenu(senderID, global.ErrorEnum.DBERROR, 'MAIN');\n}\n\n\n\nfunction receivedMessageRead(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n\n    // All messages before watermark (a timestamp) or sequence have been seen.\n    var watermark = event.read.watermark;\n    var sequenceNumber = event.read.seq;\n\n    console.log(\"Received message read event for watermark %d and sequence \" +\n        \"number %d\", watermark, sequenceNumber);\n}\n\n\nfunction receivedAccountLink(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n\n    var status = event.account_linking.status;\n    var authCode = event.account_linking.authorization_code;\n\n    console.log(\"Received account link event with for user %d with status %s \" +\n        \"and auth code %s \", senderID, status, authCode);\n}\n\n\n\n// Start server\n// Webhooks must be available via SSL with a certificate signed by a valid\n// certificate authority.\napp.listen(app.get('port'), function() {\n    console.log('Node app is running on port', app.get('port'));\n});\n\n\n\nmodule.exports = app;\n","undoManager":{"mark":99,"position":100,"stack":[[{"start":{"row":254,"column":41},"end":{"row":254,"column":42},"action":"insert","lines":[" "],"id":7434}],[{"start":{"row":256,"column":13},"end":{"row":256,"column":14},"action":"insert","lines":[" "],"id":7435}],[{"start":{"row":256,"column":14},"end":{"row":256,"column":15},"action":"insert","lines":["e"],"id":7436}],[{"start":{"row":256,"column":15},"end":{"row":256,"column":16},"action":"insert","lines":["l"],"id":7437}],[{"start":{"row":256,"column":16},"end":{"row":256,"column":17},"action":"insert","lines":["s"],"id":7438}],[{"start":{"row":256,"column":17},"end":{"row":256,"column":18},"action":"insert","lines":["e"],"id":7439}],[{"start":{"row":256,"column":18},"end":{"row":256,"column":19},"action":"insert","lines":[" "],"id":7440}],[{"start":{"row":256,"column":19},"end":{"row":256,"column":20},"action":"insert","lines":["i"],"id":7441}],[{"start":{"row":256,"column":20},"end":{"row":256,"column":21},"action":"insert","lines":["f"],"id":7442}],[{"start":{"row":256,"column":21},"end":{"row":256,"column":22},"action":"insert","lines":[" "],"id":7443}],[{"start":{"row":256,"column":22},"end":{"row":256,"column":24},"action":"insert","lines":["()"],"id":7444}],[{"start":{"row":256,"column":23},"end":{"row":256,"column":24},"action":"insert","lines":["q"],"id":7445}],[{"start":{"row":256,"column":24},"end":{"row":256,"column":25},"action":"insert","lines":["u"],"id":7446}],[{"start":{"row":256,"column":25},"end":{"row":256,"column":26},"action":"insert","lines":["i"],"id":7447}],[{"start":{"row":256,"column":26},"end":{"row":256,"column":27},"action":"insert","lines":["c"],"id":7448}],[{"start":{"row":256,"column":27},"end":{"row":256,"column":28},"action":"insert","lines":["k"],"id":7449}],[{"start":{"row":256,"column":23},"end":{"row":256,"column":28},"action":"remove","lines":["quick"],"id":7450},{"start":{"row":256,"column":23},"end":{"row":256,"column":40},"action":"insert","lines":["quickReplyPayload"]}],[{"start":{"row":256,"column":40},"end":{"row":256,"column":41},"action":"insert","lines":[" "],"id":7451}],[{"start":{"row":256,"column":40},"end":{"row":256,"column":41},"action":"remove","lines":[" "],"id":7452}],[{"start":{"row":256,"column":39},"end":{"row":256,"column":40},"action":"remove","lines":["d"],"id":7453}],[{"start":{"row":256,"column":39},"end":{"row":256,"column":40},"action":"insert","lines":["d"],"id":7454}],[{"start":{"row":256,"column":40},"end":{"row":256,"column":41},"action":"insert","lines":[" "],"id":7455}],[{"start":{"row":256,"column":41},"end":{"row":256,"column":42},"action":"insert","lines":["="],"id":7456}],[{"start":{"row":256,"column":42},"end":{"row":256,"column":43},"action":"insert","lines":["="],"id":7457}],[{"start":{"row":256,"column":43},"end":{"row":256,"column":44},"action":"insert","lines":[" "],"id":7458}],[{"start":{"row":256,"column":44},"end":{"row":256,"column":46},"action":"insert","lines":["''"],"id":7459}],[{"start":{"row":256,"column":45},"end":{"row":256,"column":46},"action":"insert","lines":["C"],"id":7460}],[{"start":{"row":256,"column":46},"end":{"row":256,"column":47},"action":"insert","lines":["A"],"id":7461}],[{"start":{"row":256,"column":47},"end":{"row":256,"column":48},"action":"insert","lines":["N"],"id":7462}],[{"start":{"row":256,"column":48},"end":{"row":256,"column":49},"action":"insert","lines":["C"],"id":7463}],[{"start":{"row":256,"column":49},"end":{"row":256,"column":50},"action":"insert","lines":["E"],"id":7464}],[{"start":{"row":256,"column":50},"end":{"row":256,"column":51},"action":"insert","lines":["L"],"id":7465}],[{"start":{"row":256,"column":53},"end":{"row":256,"column":54},"action":"insert","lines":[" "],"id":7466}],[{"start":{"row":256,"column":54},"end":{"row":256,"column":55},"action":"insert","lines":["{"],"id":7467}],[{"start":{"row":256,"column":55},"end":{"row":258,"column":13},"action":"insert","lines":["","                ","            }"],"id":7468}],[{"start":{"row":257,"column":16},"end":{"row":260,"column":18},"action":"insert","lines":["        case 'CANCEL':","            context = ContextEnum.DEFAULT;","            api.sendTextMessage(senderID, 'What else can I help you with?', 'MAIN');","            break;"],"id":7469}],[{"start":{"row":257,"column":0},"end":{"row":257,"column":38},"action":"remove","lines":["                        case 'CANCEL':"],"id":7470}],[{"start":{"row":256,"column":55},"end":{"row":257,"column":0},"action":"remove","lines":["",""],"id":7471}],[{"start":{"row":257,"column":12},"end":{"row":257,"column":16},"action":"insert","lines":["    "],"id":7472}],[{"start":{"row":258,"column":12},"end":{"row":258,"column":16},"action":"insert","lines":["    "],"id":7473}],[{"start":{"row":254,"column":43},"end":{"row":254,"column":44},"action":"remove","lines":["{"],"id":7474}],[{"start":{"row":254,"column":42},"end":{"row":254,"column":43},"action":"remove","lines":["("],"id":7475}],[{"start":{"row":254,"column":42},"end":{"row":254,"column":43},"action":"insert","lines":["{"],"id":7476}],[{"start":{"row":259,"column":0},"end":{"row":259,"column":18},"action":"remove","lines":["            break;"],"id":7477}],[{"start":{"row":258,"column":88},"end":{"row":259,"column":0},"action":"remove","lines":["",""],"id":7478}],[{"start":{"row":254,"column":0},"end":{"row":254,"column":43},"action":"remove","lines":["            } else if (messageText == '') {"],"id":7479}],[{"start":{"row":253,"column":19},"end":{"row":254,"column":0},"action":"remove","lines":["",""],"id":7480}],[{"start":{"row":254,"column":16},"end":{"row":254,"column":70},"action":"remove","lines":["api.sendTextMessageWithMenu(senderID, '🙂', 'CANCEL');"],"id":7481}],[{"start":{"row":254,"column":12},"end":{"row":254,"column":16},"action":"remove","lines":["    "],"id":7482}],[{"start":{"row":254,"column":8},"end":{"row":254,"column":12},"action":"remove","lines":["    "],"id":7483}],[{"start":{"row":254,"column":4},"end":{"row":254,"column":8},"action":"remove","lines":["    "],"id":7484}],[{"start":{"row":254,"column":0},"end":{"row":254,"column":4},"action":"remove","lines":["    "],"id":7485}],[{"start":{"row":253,"column":19},"end":{"row":254,"column":0},"action":"remove","lines":["",""],"id":7486}],[{"start":{"row":257,"column":13},"end":{"row":257,"column":14},"action":"insert","lines":[" "],"id":7487}],[{"start":{"row":257,"column":14},"end":{"row":257,"column":15},"action":"insert","lines":["e"],"id":7488}],[{"start":{"row":257,"column":15},"end":{"row":257,"column":16},"action":"insert","lines":["l"],"id":7489}],[{"start":{"row":257,"column":16},"end":{"row":257,"column":17},"action":"insert","lines":["s"],"id":7490}],[{"start":{"row":257,"column":17},"end":{"row":257,"column":18},"action":"insert","lines":["e"],"id":7491}],[{"start":{"row":257,"column":18},"end":{"row":257,"column":19},"action":"insert","lines":[" "],"id":7492}],[{"start":{"row":257,"column":19},"end":{"row":257,"column":20},"action":"insert","lines":["{"],"id":7493}],[{"start":{"row":257,"column":20},"end":{"row":259,"column":13},"action":"insert","lines":["","                ","            }"],"id":7494}],[{"start":{"row":258,"column":16},"end":{"row":258,"column":70},"action":"insert","lines":["api.sendTextMessageWithMenu(senderID, '🙂', 'CANCEL');"],"id":7495}],[{"start":{"row":304,"column":42},"end":{"row":304,"column":43},"action":"remove","lines":["'"],"id":7496}],[{"start":{"row":304,"column":41},"end":{"row":304,"column":42},"action":"remove","lines":["'"],"id":7497}],[{"start":{"row":304,"column":41},"end":{"row":304,"column":43},"action":"insert","lines":["''"],"id":7498}],[{"start":{"row":304,"column":42},"end":{"row":304,"column":43},"action":"insert","lines":["T"],"id":7499}],[{"start":{"row":304,"column":43},"end":{"row":304,"column":44},"action":"insert","lines":["Y"],"id":7500}],[{"start":{"row":304,"column":43},"end":{"row":304,"column":44},"action":"remove","lines":["Y"],"id":7501}],[{"start":{"row":304,"column":42},"end":{"row":304,"column":43},"action":"remove","lines":["T"],"id":7502}],[{"start":{"row":304,"column":42},"end":{"row":304,"column":43},"action":"insert","lines":["R"],"id":7503}],[{"start":{"row":304,"column":43},"end":{"row":304,"column":44},"action":"insert","lines":["E"],"id":7504}],[{"start":{"row":304,"column":44},"end":{"row":304,"column":45},"action":"insert","lines":["D"],"id":7505}],[{"start":{"row":304,"column":45},"end":{"row":304,"column":46},"action":"insert","lines":["O"],"id":7506}],[{"start":{"row":257,"column":19},"end":{"row":257,"column":20},"action":"insert","lines":["i"],"id":7507}],[{"start":{"row":257,"column":20},"end":{"row":257,"column":21},"action":"insert","lines":["f"],"id":7508}],[{"start":{"row":257,"column":21},"end":{"row":257,"column":22},"action":"insert","lines":[" "],"id":7509}],[{"start":{"row":257,"column":22},"end":{"row":257,"column":23},"action":"insert","lines":["("],"id":7510}],[{"start":{"row":257,"column":23},"end":{"row":257,"column":24},"action":"insert","lines":[")"],"id":7511}],[{"start":{"row":257,"column":23},"end":{"row":257,"column":52},"action":"insert","lines":["quickReplyPayload == 'CANCEL'"],"id":7512}],[{"start":{"row":257,"column":45},"end":{"row":257,"column":51},"action":"remove","lines":["CANCEL"],"id":7513},{"start":{"row":257,"column":45},"end":{"row":257,"column":46},"action":"insert","lines":["R"]}],[{"start":{"row":257,"column":46},"end":{"row":257,"column":47},"action":"insert","lines":["E"],"id":7514}],[{"start":{"row":257,"column":47},"end":{"row":257,"column":48},"action":"insert","lines":["D"],"id":7515}],[{"start":{"row":257,"column":48},"end":{"row":257,"column":49},"action":"insert","lines":["O"],"id":7516}],[{"start":{"row":256,"column":35},"end":{"row":256,"column":36},"action":"insert","lines":["W"],"id":7517}],[{"start":{"row":256,"column":36},"end":{"row":256,"column":37},"action":"insert","lines":["i"],"id":7518}],[{"start":{"row":256,"column":37},"end":{"row":256,"column":38},"action":"insert","lines":["t"],"id":7519}],[{"start":{"row":256,"column":38},"end":{"row":256,"column":39},"action":"insert","lines":["h"],"id":7520}],[{"start":{"row":256,"column":20},"end":{"row":256,"column":39},"action":"remove","lines":["sendTextMessageWith"],"id":7521},{"start":{"row":256,"column":20},"end":{"row":256,"column":43},"action":"insert","lines":["sendTextMessageWithMenu"]}],[{"start":{"row":407,"column":0},"end":{"row":413,"column":3},"action":"remove","lines":["/*"," * Message Read Event"," *"," * This event is called when a previously-sent message has been read."," * https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read"," *"," */"],"id":7522}],[{"start":{"row":420,"column":0},"end":{"row":427,"column":3},"action":"remove","lines":["/*"," * Account Link Event"," *"," * This event is called when the Link Account or UnLink Account action has been"," * tapped."," * https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking"," *"," */"],"id":7523}],[{"start":{"row":64,"column":0},"end":{"row":70,"column":3},"action":"remove","lines":["/*"," * All callbacks for Messenger are POST-ed. They will be sent to the same"," * webhook. Be sure to subscribe your app to your page to receive callbacks"," * for your page."," * https://developers.facebook.com/docs/messenger-platform/product-overview/setup#subscribe_app"," *"," */"],"id":7524}],[{"start":{"row":129,"column":0},"end":{"row":136,"column":3},"action":"remove","lines":["/*"," * Verify that the callback came from Facebook. Using the App Secret from"," * the App Dashboard, we can verify the signature that is sent with each"," * callback in the x-hub-signature field, located in the header."," *"," * https://developers.facebook.com/docs/graph-api/webhooks#setup"," *"," */"],"id":7525}],[{"start":{"row":153,"column":0},"end":{"row":160,"column":3},"action":"remove","lines":["/*"," * Authorization Event"," *"," * The value for 'optin.ref' is defined in the entry point. For the \"Send to"," * Messenger\" plugin, it is the 'data-ref' field. Read more at"," * https://developers.facebook.com/docs/messenger-platform/webhook-reference/authentication"," *"," */"],"id":7526}],[{"start":{"row":175,"column":0},"end":{"row":188,"column":3},"action":"remove","lines":["/*"," * Message Event"," *"," * This event is called when a message is sent to your page. The 'message'"," * object format can vary depending on the kind of message that was received."," * Read more at https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-received"," *"," * For this example, we're going to echo any text that we get. If we get some"," * special keywords ('button', 'generic', 'receipt'), then we'll send back"," * examples of those bubbles to illustrate the special message bubbles we've"," * created. If we receive a message with an attachment (image, video, audio),"," * then we'll simply confirm that we've received the attachment."," *"," */"],"id":7527}],[{"start":{"row":170,"column":0},"end":{"row":171,"column":42},"action":"remove","lines":["    // When an authentication is received, we'll send a message back to the sender","    // to let them know it was successful."],"id":7528}],[{"start":{"row":159,"column":0},"end":{"row":163,"column":14},"action":"remove","lines":["    // The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'","    // The developer can set this to an arbitrary value to associate the","    // authentication callback with the 'Send to Messenger' click event. This is","    // a way to do account linking when the user clicks the 'Send to Messenger'","    // plugin."],"id":7529}],[{"start":{"row":158,"column":0},"end":{"row":159,"column":0},"action":"remove","lines":["",""],"id":7530}],[{"start":{"row":157,"column":37},"end":{"row":158,"column":0},"action":"remove","lines":["",""],"id":7531}],[{"start":{"row":280,"column":0},"end":{"row":286,"column":3},"action":"remove","lines":["/*"," * Delivery Confirmation Event"," *"," * This event is sent to confirm the delivery of a message. Read more about"," * these fields at https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered"," *"," */"],"id":7532}],[{"start":{"row":300,"column":0},"end":{"row":306,"column":3},"action":"remove","lines":["/*"," * Postback Event"," *"," * This event is called when a postback is tapped on a Structured Message."," * https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback-received"," *"," */"],"id":7533}],[{"start":{"row":106,"column":0},"end":{"row":110,"column":3},"action":"remove","lines":["/*"," * This path is used for account linking. The account linking call-to-action"," * (sendAccountLinking) is pointed to this URL."," *"," */"],"id":7534}]]},"ace":{"folds":[],"scrolltop":4721,"scrollleft":0,"selection":{"start":{"row":307,"column":22},"end":{"row":307,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":294,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1479048854583}